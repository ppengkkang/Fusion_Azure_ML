# Continuous Integration (CI) pipeline that orchestrates the training, evaluation, registration, deployment, and testing of the fusion model.

resources:
  containers:
  - container: mlops
    image: mcr.microsoft.com/mlops/python:latest

pr: none
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - fusion/
    - ml_service/pipelines/fusion_register_local_model_pipeline.py

variables:
- template: fusion-variables-template.yml
- group: devopsforai-aml-vg

pool:
  vmImage: ubuntu-latest

stages:
- stage: 'Model_CI'
  displayName: 'Model CI'
  condition: not(variables['MODEL_BUILD_ID'])
  jobs:
  - job: "Model_CI_Pipeline"
    displayName: "Model CI Pipeline"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - template: code-quality-template.yml


- stage: 'Register_Local_Model'
  displayName: 'Register local model'
  condition: and(succeeded())
  jobs:
  - job: "Model_Register_Pipeline"
    condition: and(succeeded())
    displayName: "Model Register Pipeline"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - task: AzureCLI@1
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        workingDirectory: $(Build.SourcesDirectory)
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python -m ml_service.pipelines.fusion_register_local_model_pipeline
          echo "Model registered"
      name: 'registermodel'
      displayName: 'Regsiter Model'

- stage: 'Deploy_ACI'
  displayName: 'Deploy to ACI'
  dependsOn: Trigger_AML_Pipeline
  condition: and(or(succeeded(), variables['ACI_DEPLOYMENT_NAME'])
  jobs:
  - job: "Deploy_ACI"
    displayName: "Deploy to ACI"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-model-deploy-task.AMLModelDeploy@0
      displayName: 'Azure ML Model Deploy'
      inputs:
        azureSubscription: $(WORKSPACE_SVC_CONNECTION)
        modelSourceType: manualSpec
        modelName: '$(MODEL_NAME)'
        modelVersion: 3
        inferencePath: '$(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)/scoring/inference_config.yml'
        deploymentTarget: ACI
        deploymentName: $(ACI_DEPLOYMENT_NAME)
        deployConfig: '$(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)/scoring/deployment_config_aci.yml'
        overwriteExistingDeployment: true
    - task: AzureCLI@1
      displayName: 'Smoke test'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python -m ml_service.util.smoke_test_scoring_service --type ACI --service "$(ACI_DEPLOYMENT_NAME)"

- stage: 'Deploy_AKS'
  displayName: 'Deploy to AKS'
  dependsOn: Deploy_ACI
  condition: and(succeeded(), variables['AKS_DEPLOYMENT_NAME'])
  jobs:
  - job: "Deploy_AKS"
    displayName: "Deploy to AKS"
    container: mlops
    timeoutInMinutes: 0
    steps:
    - task: ms-air-aiagility.vss-services-azureml.azureml-model-deploy-task.AMLModelDeploy@0
      displayName: 'Azure ML Model Deploy'
      inputs:
        azureSubscription: $(WORKSPACE_SVC_CONNECTION)
        modelSourceType: manualSpec
        modelName: '$(MODEL_NAME)'
        modelVersion: 3
        inferencePath: '$(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)/scoring/inference_config.yml'
        deploymentTarget: AKS
        aksCluster: $(AKS_COMPUTE_NAME)
        deploymentName: $(AKS_DEPLOYMENT_NAME)
        deployConfig: '$(Build.SourcesDirectory)/$(SOURCES_DIR_TRAIN)/scoring/deployment_config_aks.yml'
        overwriteExistingDeployment: true
    - task: AzureCLI@1
      displayName: 'Smoke test'
      inputs:
        azureSubscription: '$(WORKSPACE_SVC_CONNECTION)'
        scriptLocation: inlineScript
        inlineScript: |
          set -e # fail on error
          export SUBSCRIPTION_ID=$(az account show --query id -o tsv)
          python -m ml_service.util.smoke_test_scoring_service --type AKS --service "$(AKS_DEPLOYMENT_NAME)"
